@using TemplanzaHybrid.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject TemplanzaHybrid.Services.IStaticAssetsService Assets

<EditForm class="form-blend" Model="Model"
          OnValidSubmit="Submit" OnInvalidSubmit="OnInvalid">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Nombre</label>
        <InputText class="form-control" @bind-Value="Model.Nombre" />
        <ValidationMessage For="() => Model.Nombre" />
    </div>

    <div class="mb-3">
        <label class="form-label">Tipo</label>
        <InputText class="form-control" @bind-Value="Model.Tipo" />
        <ValidationMessage For="() => Model.Tipo" />
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <label class="form-label">Precio</label>
            <InputNumber class="form-control" @bind-Value="Model.Precio" />
            <ValidationMessage For="() => Model.Precio" />
        </div>
        <div class="col-md-6 mb-3">
            <label class="form-label">Stock</label>
            <InputNumber class="form-control" @bind-Value="Model.Stock" />
            <ValidationMessage For="() => Model.Stock" />
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Imagen (URL local)</label>
        <input class="form-control" list="imgBlends" @bind="Model.ImagenUrl" />
        <datalist id="imgBlends">
            @foreach (var url in _disponibles)
            {
                <option value="@url"></option>
            }
        </datalist>
        <div class="form-text">Elegí de la galería o pegá una ruta.</div>

        @if (_disponibles.Count > 0)
        {
            <div class="d-flex flex-wrap gap-2 mt-2">
                @foreach (var url in _disponibles)
                {
                    <img src="@url"
                         class="img-thumbnail thumb-48 object-cover selectable @(Model.ImagenUrl == url ? "selected" : "")"
                         title="@url"
                         @onclick="() => Model.ImagenUrl = url" />
                }
            </div>
        }

        <ValidationMessage For="() => Model.ImagenUrl" />
    </div>

    <div class="d-flex gap-2">
        <button type="submit" class="btn btn-primary">@BotonGuardar</button>
        <button type="button" class="btn btn-outline-secondary" @onclick="OnCancel">Cancelar</button>
    </div>
</EditForm>

@code {
    [Parameter] public Blend Model { get; set; } = new();
    [Parameter] public bool EsEdicion { get; set; }
    [Parameter] public EventCallback<Blend> OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancelClick { get; set; }

    private string BotonGuardar => EsEdicion ? "Guardar cambios" : "Crear";
    private List<string> _disponibles = new();

    protected override async Task OnInitializedAsync()
    {
        _disponibles = (await Assets.GetProductoImagesAsync()).ToList();
        if (string.IsNullOrWhiteSpace(Model.ImagenUrl) && _disponibles.Count > 0)
            Model.ImagenUrl = _disponibles[0];
    }

    private Task Submit() => OnSubmit.InvokeAsync(Model);
    private Task OnCancel() => OnCancelClick.InvokeAsync();
    private Task OnInvalid(EditContext _) => JS.InvokeVoidAsync("templanza.focusFirstInvalid").AsTask();
}
