@using TemplanzaHybrid.Models
@inject TemplanzaHybrid.Services.IStaticAssetsService Assets

<EditForm class="form-usuario" Model="Model" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="col-md-6 mb-3">
            <label class="form-label">Nombre</label>
            <InputText class="form-control" @bind-Value="Model.Nombre" />
            <ValidationMessage For="() => Model.Nombre" />
        </div>
        <div class="col-md-6 mb-3">
            <label class="form-label">Email</label>
            <InputText class="form-control" @bind-Value="Model.Email" />
            <ValidationMessage For="() => Model.Email" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <label class="form-label">Rol</label>
            <InputSelect class="form-select" @bind-Value="Model.Rol">
                @foreach (var r in Enum.GetValues<RolUsuario>())
                {
                    <option value="@r">@r</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-6 mb-3 d-flex align-items-end">
            <div class="form-check">
                <InputCheckbox class="form-check-input" @bind-Value="Model.Activo" />
                <label class="form-check-label ms-1">Activo</label>
            </div>
        </div>
    </div>

    @* Para altas, permitimos definir password; para edición, lo dejamos opcional *@
    @if (!EsEdicion)
    {
        <div class="mb-3">
            <label class="form-label">Contraseña</label>
            <InputText class="form-control" type="password" @bind-Value="Model.Password" />
            <ValidationMessage For="() => Model.Password" />
        </div>
    }

    <div class="mb-2">
        <label class="form-label">Imagen (URL local)</label>
        <input class="form-control" list="imgUsers" @bind="Model.ImagenUrl" />
        <datalist id="imgUsers">
            @foreach (var url in _avatars)
            {
                <option value="@url"></option>
            }
        </datalist>
        <div class="form-text">Ej: /images/usuarios/admin1.png</div>
        <ValidationMessage For="() => Model.ImagenUrl" />
    </div>

    @if (_avatars.Count > 0)
    {
        <div class="d-flex flex-wrap gap-2 mt-2">
            @foreach (var url in _avatars)
            {
                <img src="@url"
                     class="img-thumbnail avatar-48 object-cover selectable @((Model.ImagenUrl == url) ? "selected" : "")"
                     title="@url"
                     @onclick="() => Model.ImagenUrl = url" />
            }
        </div>
    }

    <div class="d-flex gap-2 mt-3">
        <button type="submit" class="btn btn-primary">@BotonGuardar</button>
        <button type="button" class="btn btn-outline-secondary" @onclick="OnCancel">Cancelar</button>
    </div>
</EditForm>

@code {
    [Parameter] public Usuario Model { get; set; } = new();
    [Parameter] public bool EsEdicion { get; set; }
    [Parameter] public EventCallback<Usuario> OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancelClick { get; set; }

    private string BotonGuardar => EsEdicion ? "Guardar cambios" : "Crear";
    private List<string> _avatars = new();

    protected override async Task OnInitializedAsync()
    {
        _avatars = (await Assets.GetUsuarioImagesAsync()).ToList();
    }

    private Task Submit() => OnSubmit.InvokeAsync(Model);
    private Task OnCancel() => OnCancelClick.InvokeAsync();
}
